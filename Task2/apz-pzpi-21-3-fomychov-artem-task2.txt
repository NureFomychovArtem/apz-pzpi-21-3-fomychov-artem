МЕТА РОБОТИ

Набуття навичок з розробки серверної частини програмного забезпечення, описати основні сутності, прийняті інженерні рішення, загальну архітектуру системи, показати будову її серверних компонентів та структуру бази даних.


1 ОПИС АРХІТЕКТУРИ СИСТЕМИ
1.1 Опис архітектури серверної частини

Для створення проєкту було обрано трьох-рівневу архітектуру, що включає рівні доступа до даних, бізнес-логіки та презентаційний рівень. 
Рівень DAL містить інформацію про моделі бази даних та логіку отримання даних з використанням патерну репозиторій (додаток А).
Рівень BLL містить інформацію про DTO-моделі, валідацію, сервіси та бізнес-логіку (додаток Б).
Рівень API містить контролери, які звертаються до сервісів для отримання готових відповідей (додаток В). 
Система розроблена відповідно до архітектурного стилю клієнт-сервер та використовує принципи REST API для реалізації віддаленого інтерфейсу.

1.2 Структура бази даних

База даних містить 11 сутностей: Аккаунт, Користувач, Роль, Учень, Вчитель, Школа, Клас, Приміщення, Відвідування, Запит, Відповідь. Сутності пов’язані між собою зв’язками один-до-багатьох та один-до-одного. 
Створимо ER-модель даних (рис. 1.2.1).


2. ОПИС АРХІТЕКТУРНИ СИСТЕМИ
2.1 Робота з базою даних

Для роботи з базою даних було обрано СУБД MS SSMS, яка використовує реляційну базу даних MS Sql Server. Ця база даних добре поєднується з C# та може бути легко розгорнута у сервісі Azure. 
Для роботи з базою даних було обрано ORM фреймворк Entity Framework Core, так як він має підтримку для більш широкого спектру баз даних та може працювати як на Windows, так і на Linux або macOS. Основна логіка роботи з базою даних було описана у класі GenericRepository (додаток Г).
Для створення бази даних було обрано метод Code First – всі таблиці були створені за моделями, описаними у програмі. 
В коді міграції було додано автоматичний скрипт для додавання базових ролей(учень, вчитель, директор, охоронець, працівник) та надано відповідні права.


2.2Специфікація REST API

Для обміну даними було обрано RESTful API — це архітектурний стиль інтерфейсу прикладної програми (API), який використовує запити HTTP для доступу та використання даних. Щоб реалізувати це, для кожної основної сутності програмної системи було створено окремий контролер, у якому прописані усі маршрути для взаємодії. Нище наведені прикладі цих маршрутів та їх призначення.

Посилання	Метод	Призначення
/api/Account/all	GET	Отримання всіх аккаунтів
api/Account/{id}	GET	Отримання аккаунту за ID
/api/Account/LoginUser
	POST	Аутентифікація користувача через передачу даних

/api/User/all/	GET	Отримання всіх користувачів
/api/ User /{id}
	GET	Отримання користувача за ID
/api/ User /{id}
	PUT	Оновлення користувача за ID
/api/ User /{id}
	DELETE	Видалення користувача за ID
/api/ User	POST	Додавання користувача
/api/School/all	GET	Отримання всіх шкіл
/api/School/{id}	GET	Отримання школи за ID
/api/School/{id}	PUT	Оновлення школи за ID
/api/School/{id}	DELETE	Видалення школи за ID
/api/School	POST	Додавання школи
/api/Classroom/all	GET	Отримання всіх приміщень
/api/Classroom/{id}	GET	Отримання приміщення за  ID
/api/Classroom/{id}	PUT	Оновлення приміщення за ID
/api/Classroom/{id}	DELETE	Видалення приміщення за ID
/api/Classroom	POST	Додавання приміщення
/api/Class/all	GET	Отримання всіх приміщень
/api/ Class /{id}	GET	Отримання класу за його ID
/api/ Class /StudentId/{id}	GET	Отримання класу за ID учня
/api/ Class /{id}	PUT	Оновлення класу за ID
/api/ Class /{id}	DELETE	Видалення класу за ID
/api/ Class	POST	Додавання класу
/api/Student/all	GET	Отримання всіх студентів
/api/Student/{id}	GET	Отримання учня за його ID
/api/Student/class/{id}	GET	Отримання учнів класу
/api/Student	POST	Додавання учня
/api/Student/{id}	PUT	Оновлення учня за ID
/api/Student/{id}	DELETE	Видалення учня за ID
/api/Teacher/all	POST	Отримання всіх вчителів
/api/Teacher/{id}	GET	Отримання вчителя за ID
/api/Teacher/class/{id}	GET	Отримання класів вчителя
/api/Teacher/{id}	PUT	Оновлення вчителя за ID
/api/Teacher/{id}	DELETE	Видалення вчителя за ID
/api/Teacher	POST	Додавання вчителя
/api/Request/all	GET	Отримання всіх запитів
/api/ Request /{id}	GET	Отримання запиту за ID
/api/ Request /{id}	PUT	Оновлення запиту за ID
/api/ Request /{id}	DELETE	Видалення запиту за ID
/api/ Request	POST	Додавання запиту
/api/Answer/all	GET	Отримання всіх відповідей
/api/ Answer /{id}	GET	Отримання відповіді за ID
/api/ Answer /{id}	PUT	Оновлення відповіді за ID
/api/ Answer /{id}	DELETE	Видалення відповіді за ID
/api/ Answer	POST	Додавання відповіді
/api/Attendance/all	GET	Отримання всіх відвідувань
/api/ Attendance /{id}	GET	Отримання відвідування за ID
/api/ Attendance /{id}	GET	Отримання відвідувань користувача
/api/ Attendance /{id}	GET	Отримання статистики відвідувань користувача
/api/ Attendance /{id}	PUT	Оновлення відвідування за ID
/api/ Attendance /{id}	DELETE	Видалення відвідування за ID
/api/ Attendance 	POST	Додавання відвідування


2.3	Автентифікація

Для реалізації авторизації та автентифікації використовується JSON Web Token (JWT). В appseting.json додається інформація про ключ, який використовується в класі JwtService:
01 private readonly SymmetricSecurityKey _key;
02 public JwtService(IConfiguration config)
03 {
04     _key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config["TokenKey"]));
05 }
06 public string CreateToken(Account data)
07 {
08     var claims = new List<Claim>
09     {
10         new Claim(JwtRegisteredClaimNames.NameId, data.Login)
11     };
12 
13     var creds = new SigningCredentials(_key,15SecurityAlgorithms.HmacSha512Signature);
14 
15     var token = new JwtSecurityToken(
16             claims: claims,
17             expires: DateTime.Now.AddDays(7),
18             signingCredentials: creds
19         );
20 
21     var jwt = new JwtSecurityTokenHandler().WriteToken(token);
22 
23     return jwt;
24 }

2.4 Валідація на сервері

Валідація даних реалізовано за допомогою атрибутів Entity Framework Core та ручною перевіркою даних. Наприклад, для перевірки даних при створені аккаунту використовуються атрибути для DTO-моделей, такі як Required та MinLength. 
1 [Required(ErrorMessage = "Login is required")]
2 [MinLength(5, ErrorMessage = "Login must be at least 5 characters long")]
3 public string Login { get; set; }
4 [Required(ErrorMessage = "Password is required")]
5 [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
6 public string Password { get; set; }

2.5 Локалізація

Серверна частина локалізації пов’язана з коректною обробкою часу. З боку серверу робота з часом відбувається лише під час заповнення даних, під час відмітки відвідування, якщо запит не містить інформації про час, тобто null. 
Інформація про помилки відображається англійською мовою, оскільки англійська – світова мова та дана інформація потрібна лише під час розробки клієнтської частини. 
Для збереження даних про температуру тіла було обрану одиницю вимірювання Цельсію. За потреби дані можуть бути конвертовані на стороні клієнта у інша шкалу за формулою.

2.6 Використання механізму Dependency Injection

Для передачі залежностей використано механізм Dependency Injection. Приклад реалізації:
1 services.AddSingleton<IJwtService, JwtService>();
2 services.AddScoped<IUserService, UserService>();
У наведеному коді наведено два підходи. При використанні AddSingleton при першому запиті створюється один екземпляр сервісу який використовується протягом усього життєвого циклу додатка. При використанні AddScoped створюється новий екземпляр сервісу для кожного HTTP-запиту, який після виконання запиту видаляється.
Це дозволяє легко змінити залежності в разі потреби, налаштовувати час життя залежності та облегшувати тестування й розуміння коду.

2.7 Забезпечення безпеки даних

Забезпечення безпеки даних у серверному застосунку включає:
- хешування користувацьких паролів, збереження цих даних в базі даних у зашифрованому вигляді;
- використання ORM фреймворку Entity Framework, який запобігає SQL ін'єкції;
- упроваджені аутентифікація і авторизація користувачів за токеном JWT (JSON Web Token). Права доступу користувачів передаються до клієнтської частини застосунку, де вже буде надаватися лише відповідний функціонал. Кожен користувач має доступ лише до необхідної для його роботи інформації. 

2.8 Адміністрування системи

У кожного працівника закладу є відповідна роль, згідно якої кожен має власні права. Наприклад змінювати ролі має можливість лише директор. Відмічати присутність учнів мають змогу вчителі та охоронці закладу. 
Аналогічні права діють і під час роботи з заявками, школою, класами тощо. 


3.UML ДІАГРАМИ СИСТЕМИ
3.1 UML діаграми прецедентів (Use Case Diagram)

Після визначення основних сутностей системи слід описати їх можливості. Для цього зобразимо діаграми прецедентів програмної системи для відзначення відвідувань(рис. 3.1.1). 
Як бачимо з діаграми ми маємо чотирьох акторів: учня, вчителя, директора та охоронця. Кожен з ним має свої права та обов’язки.

3.2 UML діаграма розгортання

Діаграма розгортання (Deployment Diagram) вказує на те, як фізичні компоненти системи розташовані та спілкуються один з одним(рис. 3.2.2). Серверна частина розроблюється за допомогою ASP.NET API. 

3.3 Діаграма пакетів

Для масштабування програмної системи у майбутньому, а також можливості змінювати її в залежності від можливих потреб, було обрано використати трьох-рівневу архітектуру (3-tier architecture). Тож слід правильно визначити залежності між пакети. Для цього побудуємо діаграму пакетів (див. рис. 3.3.1).
Ядром системи виступає DAL, який містить опис основних сутностей системи. Він не повинен залежати ні від кого. Далі йде рівень BLL, що буде містити основну логіку системи, інтерфейси, проміжні сутності і залежати він буде лише від DAL-у. 
Третім рівнем архітектури є API. Він використовуються для взаємодією з системою.

3.4 ER-діаграма

На рисунку 1.2.1 було наведено ER-діаграму, в якій пов’язано 11 сутностей, що реалізовані як таблиці бази даних. 

Висновки 

В результаті виконання даної лабораторної роботи було створену серверну частину для «Програмної системи для збору інформації про діяльність школярів та працівників навчального закладу з використанням сканерів відбитку пальця та температури (EduCheck)». Описано прийняті інженерні рішення, розроблено діаграми, які ілюструють загальну архітектуру системи, будову її серверних компонентів та структуру бази даних.
Посилання на програмний код: https://github.com/NureFomychovArtem/apz-pzpi-21-3-fomychov-artem/tree/main/Task2/apz-pzpi-21-3-fomychov-artem-task2
Посилання на відео-демонстрацію роботи застосунку: https://youtu.be/zxHzqx9Kha8


Додаток А
Приклад коду DAL

Модель User:
01 namespace DAL.Entities
02 {
03     public class User
04     {
05         public int Id { get; set; }
06         public string Name { get; set; }
07         public string Surname { get; set; }
08         public string Patronymic { get; set; }
09         public string Email { get; set; }
10         public string Phone { get; set; }
11         public string Fingerprint { get; set; }
12         public int AccountId { get; set; }
13         public Account Account { get; set; }
14         public int RoleId { get; set; }
15         public Role Role { get; set; }
16     }
17 }

Код інтерфейсу IUserRepository:
01 using DAL.Entities;
02 
03 namespace DAL.Repository.Interfaces
04 {
05     public interface IUserRepository : IGenericRepository<User>
06     {
07         Task<IEnumerable<User>> GetAllAsync();
08         Task<User> GetByIdAsync(int id);
09         Task<User> GetByFingerprintAsync(string fingerprint);
10     }
11 }

Код класу UserRepository, який реалізує відповідний інтерфейс:
01 using DAL.Data;
02 using DAL.Entities;
03 using DAL.Repository.Interfaces;

04 namespace DAL.Repository
05 {
06     public class UserRepository : GenericRepository<User>, IUserRepository
07     {
08         public UserRepository(DBContext dbContext) : base(dbContext)
09         {
10         }
11 
12         public async Task<IEnumerable<User>> GetAllAsync()
13         {
14             var users = await base.GetAllAsync();
15 
16             foreach (var user in users)
17             {
18                 await LoadRelatedDataAsync(user, x => x.Account);
19                 await LoadRelatedDataAsync(user, x => x.Role);
20             }
21 
22             return users;
23         }
24 
25         public async Task<User> GetByIdAsync(int id)
26         {
27             var user = await base.GetByIdAsync(id)
28                 ?? throw new Exception("User was not found!");
29 
30             await LoadRelatedDataAsync(user, x => x.Account);
31             await LoadRelatedDataAsync(user, x => x.Role);
32 
33             return user;
34         }
35 
36         public async Task<User> GetByFingerprintAsync(string fingerprint)
37         {
38             var user = (await base.GetAllAsync()).FirstOrDefault(x => x.Fingerprint == fingerprint);
39 
40             await LoadRelatedDataAsync(user, x => x.Account);
41             await LoadRelatedDataAsync(user, x => x.Role);
42 
43             return user;
44         }
45     }
46 }


Додаток Б
Приклад коду BLL

Код DTO моделі користувача системи UserDTO:
 1. using AutoMapper;
 2. using BLL.Mappings;
 3. using DAL.Entities;
 4. 
 5. namespace BLL.DTO
 6. {
 7.     public class UserDTO : IMapFrom<DAL.Entities.User>
 8.     {
 9.         public int Id { get; set; }
10.         public string Name { get; set; }
11.         public string Surname { get; set; }
12.         public string Patronymic { get; set; }
13.         public string Email { get; set; }
14.         public string Phone { get; set; }
15.         public RoleName RoleName { get; set; }
16.         public RoleDTO Role { get; set; }
17. 
18.         public void MapFrom(Profile profile)
19.         {
20.             profile.CreateMap<DAL.Entities.User, UserDTO>()
21.                 .ForMember(dest => dest.Role, src => src.MapFrom(otp => otp.Role));
22.         }
23.     }
24. }

Код інтерфейсу IUserService:
 1. using BLL.DTO;
 2. 
 3. namespace BLL.Service.Interfaces
 4. {
 5.     public interface IUserService
 6.     {
 7.         Task<IEnumerable<UserDTO>> GetAllAsync();
 8.         Task<UserDTO> GetByIdAsync(int id);
 9.         Task<UserDTO> CreateAsync(CreateUserDTO data);
10.         Task UpdateAsync(int id, UpdateUserDTO data);
11.         Task DeleteAsync(int id);
12.     }
13. }

Код UserService, який реалізовує відповідний інтерфейс:
 1. using AutoMapper;
 2. using BLL.DTO;
 3. using BLL.Service.Interfaces;
 4. using DAL.Data;
 5. using DAL.Entities;
 6. using DAL.Repository.Interfaces;
 7. 
 8. namespace BLL.Service
 9. {
10.     public class UserService : IUserService
11.     {
12.         private readonly DBContext _dbContext;
13.         private readonly IUserRepository _userRepository;
14.         private readonly IAccountRepository _accountRepository;
15.         private readonly IRoleRepository _roleRepository;
16.         private readonly IAccountService _accountService;
17.         private readonly IStudentService _studentService;
18.         private readonly ITeacherService _teacherService;
19.         private readonly IMapper _mapper;
20.         public UserService(
21.             DBContext dbContext,
22.             IUserRepository userRepository,
23.             IAccountRepository accountRepository,
24.             IRoleRepository roleRepository,
25.             IAccountService accountService,
26.             IStudentService studentService,
27.             ITeacherService teacherService,
28.             IMapper mapper)
29.         {
30.             _dbContext = dbContext;
31.             _userRepository = userRepository;
32.             _accountRepository = accountRepository;
33.             _roleRepository = roleRepository;
34.             _accountService = accountService;
35.             _studentService = studentService;
36.             _teacherService = teacherService;
37.             _mapper = mapper;
38.         }
39. 
40.         /// <summary>
41.         /// Отримати список учнів
42.         /// </summary>
43.         public async Task<IEnumerable<UserDTO>> GetAllAsync()
44.         {
45.             var users = await _userRepository.GetAllAsync();
46. 
47.             var usersDTO = _mapper.Map<IEnumerable<UserDTO>>(users);
48. 
49.             return usersDTO;
50.         }
51. 
52.         /// <summary>
53.         /// Отримати учня за його ID
54.         /// </summary>
55.         public async Task<UserDTO> GetByIdAsync(int id)
56.         {
57.             if (id <= 0)
58.             {
59.                 throw new Exception("Incorrect Id");
60.             }
61. 
62.             var user = await _userRepository.GetByIdAsync(id)
63.                 ?? throw new Exception("Object was not found");
64. 
65.             return _mapper.Map<UserDTO>(user);
66.         }
67. 
68.         /// <summary>
69.         /// Додати учня 
70.         /// </summary>
71.         public async Task<UserDTO> CreateAsync(CreateUserDTO data)
72.         {
73.             var check = await _userRepository.GetAllAsync();
74. 
75. 
76.             if (check.Where(x => x.Phone == data.Phone).Any())
77.             {
78.                 throw new Exception("Phone is already in use!");
79.             }
80.             if (check.Where(x => x.Account.Login == data.Account.Login).Any())
81.             {
82.                 throw new Exception("Login is already in use!");
83.             }
84. 
85.             var account = await _accountService.CreateAsync(data.Account);
86. 
87.             var user = _mapper.Map<User>(data);
88.             user.Account = await _accountRepository.GetByIdAsync(account.Id);
89.             user.AccountId = account.Id;
90.             user.Role = await _roleRepository.GetByRoleNameAsync(RoleName.Student);
91.             user.RoleId = user.Role.Id;
92. 
93.             await _userRepository.CreateAsync(user);
94. 
95.             return _mapper.Map<UserDTO>(user);
96.         }
97. 
98.         /// <summary>
99.         /// Оновити учня
100.         /// </summary>
101.         public async Task UpdateAsync(int id, UpdateUserDTO data)
102.         {
103.             if (id <= 0 || id != data.Id)
104.             {
105.                 throw new Exception("Incorrect Id");
106.             }
107. 
108.             var user = await _userRepository.GetByIdAsync(id);
109. 
110.             if (user == null)
111.             {
112.                 throw new Exception("Object was not found");
113.             }
114. 
115.             if (!string.IsNullOrWhiteSpace(data.Name))
116.             {
117.                 user.Name = data.Name;
118.             }
119.             if (!string.IsNullOrWhiteSpace(data.Surname))
120.             {
121.                 user.Surname = data.Surname;
122.             }
123.             if (!string.IsNullOrWhiteSpace(data.Patronymic))
124.             {
125.                 user.Patronymic = data.Patronymic;
126.             }
127.             if (!string.IsNullOrWhiteSpace(data.Email))
128.             {
129.                 user.Email = data.Email;
130.             }
131.             if (!string.IsNullOrWhiteSpace(data.Phone))
132.             {
133.                 user.Phone = data.Phone;
134.             }
135.             if (!string.IsNullOrWhiteSpace(data.Fingerprint))
136.             {
137.                 user.Fingerprint = data.Fingerprint;
138.             }
139.             if (!data.RoleName.Equals(null))
140.             {
141.                 int currentYear = DateTime.Now.Month <= 7 ? DateTime.Now.Year - 1 : DateTime.Now.Year;
142. 
143.                 if (user.Role.Name == RoleName.Student)
144.                 {
145.                     var student = (await _studentService.GetAllAsync()).Where(x => x.User.Id == data.Id && x.Class.StartYear == currentYear)
146.                         ?? throw new Exception("Unable to change role because user already study in class");
147.                 }
148.                 if (user.Role.Name == RoleName.Teacher)
149.                 {
150.                     var teacher = (await _teacherService.GetAllAsync()).Where(x => x.User.Id == data.Id && x.Class.StartYear == currentYear)
151.                         ?? throw new Exception("Unable to change role because teacher already in class");
152.                 }
153.                 user.Role = await _roleRepository.GetByRoleNameAsync(data.RoleName);
154.             }
155. 
156.             _userRepository.Update(user);
157.         }
158. 
159.         /// <summary>
160.         /// Видалити учня
161.         /// </summary>
162.         public async Task DeleteAsync(int id)
163.         {
164.             if (id <= 0)
165.             {
166.                 throw new Exception("Incorrect Id");
167.             }
168. 
169.             var user = await _userRepository.GetByIdAsync(id);
170. 
171.             if (user == null)
172.             {
173.                 throw new Exception("Object was not found");
174.             }
175. 
176.             _userRepository.Delete(user);
177.         }
178.     }
179. }


Додаток В
Код контролеру

Код контролеру UserController:
1. using BLL.DTO;
 2. using BLL.Service.Interfaces;
 3. using Microsoft.AspNetCore.Mvc;
 4. 
 5. namespace server.Controllers
 6. {
 7.     [Route("api/[controller]")]
 8.     [ApiController]
 9.     public class UserController : ControllerBase
10.     {
11.         private readonly IUserService _userService;
12.         public UserController(IUserService userService)
13.         {
14.             _userService = userService;
15.         }
16. 
17.         [HttpGet("all")]
18.         public async Task<IActionResult> GetAll()
19.         {
20.             var users = await _userService.GetAllAsync();
21.             return Ok(users);
22.         }
23. 
24.         [HttpGet("{id:int}")]
25.         public async Task<IActionResult> GetById(int id)
26.         {
27.             try
28.             {
29.                 var user = await _userService.GetByIdAsync(id);
30.                 return Ok(user);
31.             }
32.             catch (Exception ex)
33.             {
34.                 return BadRequest(ex.Message);
35.             }
36.         }
37. 
38.         [HttpPost]
39.         public async Task<ActionResult<UserDTO>> Reqister([FromBody] CreateUserDTO data)
40.         {
41.             try
42.             {
43.                 var user = await _userService.CreateAsync(data);
44.                 return Ok(user);
45.             }
46.             catch (Exception ex)
47.             {
48.                 return BadRequest(ex.Message);
49.             }
50.         }
51. 
52.         [HttpPut("{id:int}")]
53.         public async Task<ActionResult> Update(int id, [FromBody] UpdateUserDTO data)
54.         {
55.             try
56.             {
57.                 await _userService.UpdateAsync(id, data);
58.                 return Ok();
59.             }
60.             catch (Exception ex)
61.             {
62.                 return BadRequest(ex.Message);
63.             }
64.         }
65. 
66.         [HttpDelete("{id:int}")]
67.         public async Task<IActionResult> Delete(int id)
68.         {
69.             try
70.             {
71.                 await _userService.DeleteAsync(id);
72.                 return Ok();
73.             }
74.             catch (Exception ex)
75.             {
76.                 return BadRequest(ex.Message);
77.             }
78.         }
79.     }
80. }


Додаток Г
Код GenericRepository

 1. using DAL.Data;
 2. using DAL.Repository.Interfaces;
 3. using Microsoft.EntityFrameworkCore;
 4. using System.Linq.Expressions;
 5. 
 6. namespace DAL.Repository
 7. {
 8.     public class GenericRepository<TEntity> : IGenericRepository<TEntity> where TEntity : class
 9.     {
10.         protected readonly DBContext _dbContext;
11.         protected readonly DbSet<TEntity> _dbSet;
12. 
13.         protected GenericRepository(DBContext context)
14.         {
15.             _dbContext = context;
16.             _dbSet = context.Set<TEntity>();
17.         }
18. 
19.         public async Task<IEnumerable<TEntity>> GetAllAsync()
20.         {
21.             return await _dbSet.ToListAsync();
22.         }
23. 
24.         public async Task<TEntity> GetByIdAsync(int id)
25.         {
26.             return await _dbSet.FindAsync(id);
27.         }
28. 
29.         public async Task CreateAsync(TEntity entity)
30.         {
31.             await _dbSet.AddAsync(entity);
32.             _dbContext.SaveChanges();
33.         }
34. 
35.         public void Delete(TEntity entity)
36.         {
37.             _dbSet.Remove(entity);
38.             _dbContext.SaveChanges();
39.         }
40. 
41.         public void Update(TEntity entity)
42.         {
43.             _dbSet.Update(entity);
44.             _dbContext.SaveChanges();
45.         }
46. 
47.         public async Task LoadRelatedDataAsync<TEntity>(TEntity entity, Expression<Func<TEntity, object>> include)
48.         {
49.             if (entity == null || include == null)
50.                 return;
51. 
52.             var propertyName = (include.Body as MemberExpression)?.Member.Name;
53.             if (string.IsNullOrEmpty(propertyName))
54.                 throw new ArgumentException("Invalid member access expression", nameof(include));
55. 
56.             await _dbContext.Entry(entity).Reference(propertyName).LoadAsync();
57.         }
58.     }
59. }

